#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoviesWebApp.MovieComponent
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="3309")]
	public partial class MovieDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMVCACTOR(MVCACTOR instance);
    partial void UpdateMVCACTOR(MVCACTOR instance);
    partial void DeleteMVCACTOR(MVCACTOR instance);
    partial void InsertMVCDIRECTOR(MVCDIRECTOR instance);
    partial void UpdateMVCDIRECTOR(MVCDIRECTOR instance);
    partial void DeleteMVCDIRECTOR(MVCDIRECTOR instance);
    partial void InsertMVCMOVIECAST(MVCMOVIECAST instance);
    partial void UpdateMVCMOVIECAST(MVCMOVIECAST instance);
    partial void DeleteMVCMOVIECAST(MVCMOVIECAST instance);
    partial void InsertMVCMOVy(MVCMOVy instance);
    partial void UpdateMVCMOVy(MVCMOVy instance);
    partial void DeleteMVCMOVy(MVCMOVy instance);
    #endregion
		
		public MovieDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["_3309ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MovieDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MVCACTOR> MVCACTORs
		{
			get
			{
				return this.GetTable<MVCACTOR>();
			}
		}
		
		public System.Data.Linq.Table<MVCDIRECTOR> MVCDIRECTORs
		{
			get
			{
				return this.GetTable<MVCDIRECTOR>();
			}
		}
		
		public System.Data.Linq.Table<MVCMOVIECAST> MVCMOVIECASTs
		{
			get
			{
				return this.GetTable<MVCMOVIECAST>();
			}
		}
		
		public System.Data.Linq.Table<MVCMovieImage> MVCMovieImages
		{
			get
			{
				return this.GetTable<MVCMovieImage>();
			}
		}
		
		public System.Data.Linq.Table<MVCMOVy> MVCMOVies
		{
			get
			{
				return this.GetTable<MVCMOVy>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MVCACTOR")]
	public partial class MVCACTOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACTID;
		
		private string _ACTNAME;
		
		private string _ACTGENDER;
		
		private EntitySet<MVCMOVIECAST> _MVCMOVIECASTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACTIDChanging(int value);
    partial void OnACTIDChanged();
    partial void OnACTNAMEChanging(string value);
    partial void OnACTNAMEChanged();
    partial void OnACTGENDERChanging(string value);
    partial void OnACTGENDERChanged();
    #endregion
		
		public MVCACTOR()
		{
			this._MVCMOVIECASTs = new EntitySet<MVCMOVIECAST>(new Action<MVCMOVIECAST>(this.attach_MVCMOVIECASTs), new Action<MVCMOVIECAST>(this.detach_MVCMOVIECASTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ACTID
		{
			get
			{
				return this._ACTID;
			}
			set
			{
				if ((this._ACTID != value))
				{
					this.OnACTIDChanging(value);
					this.SendPropertyChanging();
					this._ACTID = value;
					this.SendPropertyChanged("ACTID");
					this.OnACTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTNAME", DbType="VarChar(55)")]
		public string ACTNAME
		{
			get
			{
				return this._ACTNAME;
			}
			set
			{
				if ((this._ACTNAME != value))
				{
					this.OnACTNAMEChanging(value);
					this.SendPropertyChanging();
					this._ACTNAME = value;
					this.SendPropertyChanged("ACTNAME");
					this.OnACTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTGENDER", DbType="VarChar(20)")]
		public string ACTGENDER
		{
			get
			{
				return this._ACTGENDER;
			}
			set
			{
				if ((this._ACTGENDER != value))
				{
					this.OnACTGENDERChanging(value);
					this.SendPropertyChanging();
					this._ACTGENDER = value;
					this.SendPropertyChanged("ACTGENDER");
					this.OnACTGENDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCACTOR_MVCMOVIECAST", Storage="_MVCMOVIECASTs", ThisKey="ACTID", OtherKey="ACTID")]
		public EntitySet<MVCMOVIECAST> MVCMOVIECASTs
		{
			get
			{
				return this._MVCMOVIECASTs;
			}
			set
			{
				this._MVCMOVIECASTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MVCMOVIECASTs(MVCMOVIECAST entity)
		{
			this.SendPropertyChanging();
			entity.MVCACTOR = this;
		}
		
		private void detach_MVCMOVIECASTs(MVCMOVIECAST entity)
		{
			this.SendPropertyChanging();
			entity.MVCACTOR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MVCDIRECTOR")]
	public partial class MVCDIRECTOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DIRID;
		
		private string _DIRNAME;
		
		private EntitySet<MVCMOVy> _MVCMOVies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDIRIDChanging(int value);
    partial void OnDIRIDChanged();
    partial void OnDIRNAMEChanging(string value);
    partial void OnDIRNAMEChanged();
    #endregion
		
		public MVCDIRECTOR()
		{
			this._MVCMOVies = new EntitySet<MVCMOVy>(new Action<MVCMOVy>(this.attach_MVCMOVies), new Action<MVCMOVy>(this.detach_MVCMOVies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIRID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DIRID
		{
			get
			{
				return this._DIRID;
			}
			set
			{
				if ((this._DIRID != value))
				{
					this.OnDIRIDChanging(value);
					this.SendPropertyChanging();
					this._DIRID = value;
					this.SendPropertyChanged("DIRID");
					this.OnDIRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIRNAME", DbType="VarChar(255)")]
		public string DIRNAME
		{
			get
			{
				return this._DIRNAME;
			}
			set
			{
				if ((this._DIRNAME != value))
				{
					this.OnDIRNAMEChanging(value);
					this.SendPropertyChanging();
					this._DIRNAME = value;
					this.SendPropertyChanged("DIRNAME");
					this.OnDIRNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCDIRECTOR_MVCMOVy", Storage="_MVCMOVies", ThisKey="DIRID", OtherKey="DIRID")]
		public EntitySet<MVCMOVy> MVCMOVies
		{
			get
			{
				return this._MVCMOVies;
			}
			set
			{
				this._MVCMOVies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MVCMOVies(MVCMOVy entity)
		{
			this.SendPropertyChanging();
			entity.MVCDIRECTOR = this;
		}
		
		private void detach_MVCMOVies(MVCMOVy entity)
		{
			this.SendPropertyChanging();
			entity.MVCDIRECTOR = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MVCMOVIECAST")]
	public partial class MVCMOVIECAST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACTID;
		
		private int _MOVID;
		
		private string _ROLE;
		
		private EntityRef<MVCACTOR> _MVCACTOR;
		
		private EntityRef<MVCMOVy> _MVCMOVy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACTIDChanging(int value);
    partial void OnACTIDChanged();
    partial void OnMOVIDChanging(int value);
    partial void OnMOVIDChanged();
    partial void OnROLEChanging(string value);
    partial void OnROLEChanged();
    #endregion
		
		public MVCMOVIECAST()
		{
			this._MVCACTOR = default(EntityRef<MVCACTOR>);
			this._MVCMOVy = default(EntityRef<MVCMOVy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ACTID
		{
			get
			{
				return this._ACTID;
			}
			set
			{
				if ((this._ACTID != value))
				{
					if (this._MVCACTOR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACTIDChanging(value);
					this.SendPropertyChanging();
					this._ACTID = value;
					this.SendPropertyChanged("ACTID");
					this.OnACTIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOVID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MOVID
		{
			get
			{
				return this._MOVID;
			}
			set
			{
				if ((this._MOVID != value))
				{
					if (this._MVCMOVy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMOVIDChanging(value);
					this.SendPropertyChanging();
					this._MOVID = value;
					this.SendPropertyChanged("MOVID");
					this.OnMOVIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLE", DbType="VarChar(100)")]
		public string ROLE
		{
			get
			{
				return this._ROLE;
			}
			set
			{
				if ((this._ROLE != value))
				{
					this.OnROLEChanging(value);
					this.SendPropertyChanging();
					this._ROLE = value;
					this.SendPropertyChanged("ROLE");
					this.OnROLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCACTOR_MVCMOVIECAST", Storage="_MVCACTOR", ThisKey="ACTID", OtherKey="ACTID", IsForeignKey=true)]
		public MVCACTOR MVCACTOR
		{
			get
			{
				return this._MVCACTOR.Entity;
			}
			set
			{
				MVCACTOR previousValue = this._MVCACTOR.Entity;
				if (((previousValue != value) 
							|| (this._MVCACTOR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MVCACTOR.Entity = null;
						previousValue.MVCMOVIECASTs.Remove(this);
					}
					this._MVCACTOR.Entity = value;
					if ((value != null))
					{
						value.MVCMOVIECASTs.Add(this);
						this._ACTID = value.ACTID;
					}
					else
					{
						this._ACTID = default(int);
					}
					this.SendPropertyChanged("MVCACTOR");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCMOVy_MVCMOVIECAST", Storage="_MVCMOVy", ThisKey="MOVID", OtherKey="MOVID", IsForeignKey=true)]
		public MVCMOVy MVCMOVy
		{
			get
			{
				return this._MVCMOVy.Entity;
			}
			set
			{
				MVCMOVy previousValue = this._MVCMOVy.Entity;
				if (((previousValue != value) 
							|| (this._MVCMOVy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MVCMOVy.Entity = null;
						previousValue.MVCMOVIECASTs.Remove(this);
					}
					this._MVCMOVy.Entity = value;
					if ((value != null))
					{
						value.MVCMOVIECASTs.Add(this);
						this._MOVID = value.MOVID;
					}
					else
					{
						this._MOVID = default(int);
					}
					this.SendPropertyChanged("MVCMOVy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MVCMovieImages")]
	public partial class MVCMovieImage
	{
		
		private System.Nullable<int> _MOVID;
		
		private string _Image;
		
		public MVCMovieImage()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOVID", DbType="Int")]
		public System.Nullable<int> MOVID
		{
			get
			{
				return this._MOVID;
			}
			set
			{
				if ((this._MOVID != value))
				{
					this._MOVID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this._Image = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MVCMOVIES")]
	public partial class MVCMOVy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MOVID;
		
		private string _MOVTITLE;
		
		private System.Nullable<int> _MOVYEAR;
		
		private string _MOVLANG;
		
		private System.Nullable<int> _DIRID;
		
		private string _Image;
		
		private EntitySet<MVCMOVIECAST> _MVCMOVIECASTs;
		
		private EntityRef<MVCDIRECTOR> _MVCDIRECTOR;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMOVIDChanging(int value);
    partial void OnMOVIDChanged();
    partial void OnMOVTITLEChanging(string value);
    partial void OnMOVTITLEChanged();
    partial void OnMOVYEARChanging(System.Nullable<int> value);
    partial void OnMOVYEARChanged();
    partial void OnMOVLANGChanging(string value);
    partial void OnMOVLANGChanged();
    partial void OnDIRIDChanging(System.Nullable<int> value);
    partial void OnDIRIDChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    #endregion
		
		public MVCMOVy()
		{
			this._MVCMOVIECASTs = new EntitySet<MVCMOVIECAST>(new Action<MVCMOVIECAST>(this.attach_MVCMOVIECASTs), new Action<MVCMOVIECAST>(this.detach_MVCMOVIECASTs));
			this._MVCDIRECTOR = default(EntityRef<MVCDIRECTOR>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOVID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MOVID
		{
			get
			{
				return this._MOVID;
			}
			set
			{
				if ((this._MOVID != value))
				{
					this.OnMOVIDChanging(value);
					this.SendPropertyChanging();
					this._MOVID = value;
					this.SendPropertyChanged("MOVID");
					this.OnMOVIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOVTITLE", DbType="VarChar(255)")]
		public string MOVTITLE
		{
			get
			{
				return this._MOVTITLE;
			}
			set
			{
				if ((this._MOVTITLE != value))
				{
					this.OnMOVTITLEChanging(value);
					this.SendPropertyChanging();
					this._MOVTITLE = value;
					this.SendPropertyChanged("MOVTITLE");
					this.OnMOVTITLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOVYEAR", DbType="Int")]
		public System.Nullable<int> MOVYEAR
		{
			get
			{
				return this._MOVYEAR;
			}
			set
			{
				if ((this._MOVYEAR != value))
				{
					this.OnMOVYEARChanging(value);
					this.SendPropertyChanging();
					this._MOVYEAR = value;
					this.SendPropertyChanged("MOVYEAR");
					this.OnMOVYEARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MOVLANG", DbType="VarChar(50)")]
		public string MOVLANG
		{
			get
			{
				return this._MOVLANG;
			}
			set
			{
				if ((this._MOVLANG != value))
				{
					this.OnMOVLANGChanging(value);
					this.SendPropertyChanging();
					this._MOVLANG = value;
					this.SendPropertyChanged("MOVLANG");
					this.OnMOVLANGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIRID", DbType="Int")]
		public System.Nullable<int> DIRID
		{
			get
			{
				return this._DIRID;
			}
			set
			{
				if ((this._DIRID != value))
				{
					if (this._MVCDIRECTOR.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDIRIDChanging(value);
					this.SendPropertyChanging();
					this._DIRID = value;
					this.SendPropertyChanged("DIRID");
					this.OnDIRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="VarChar(255)")]
		public string Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCMOVy_MVCMOVIECAST", Storage="_MVCMOVIECASTs", ThisKey="MOVID", OtherKey="MOVID")]
		public EntitySet<MVCMOVIECAST> MVCMOVIECASTs
		{
			get
			{
				return this._MVCMOVIECASTs;
			}
			set
			{
				this._MVCMOVIECASTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MVCDIRECTOR_MVCMOVy", Storage="_MVCDIRECTOR", ThisKey="DIRID", OtherKey="DIRID", IsForeignKey=true)]
		public MVCDIRECTOR MVCDIRECTOR
		{
			get
			{
				return this._MVCDIRECTOR.Entity;
			}
			set
			{
				MVCDIRECTOR previousValue = this._MVCDIRECTOR.Entity;
				if (((previousValue != value) 
							|| (this._MVCDIRECTOR.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MVCDIRECTOR.Entity = null;
						previousValue.MVCMOVies.Remove(this);
					}
					this._MVCDIRECTOR.Entity = value;
					if ((value != null))
					{
						value.MVCMOVies.Add(this);
						this._DIRID = value.DIRID;
					}
					else
					{
						this._DIRID = default(Nullable<int>);
					}
					this.SendPropertyChanged("MVCDIRECTOR");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MVCMOVIECASTs(MVCMOVIECAST entity)
		{
			this.SendPropertyChanging();
			entity.MVCMOVy = this;
		}
		
		private void detach_MVCMOVIECASTs(MVCMOVIECAST entity)
		{
			this.SendPropertyChanging();
			entity.MVCMOVy = null;
		}
	}
}
#pragma warning restore 1591
